from flask import Flask, render_template, request
import db
from forms import Search_Book, Search_Borrowers, Return_Book, Borrowers_Lend
from datetime import timedelta, date

app = Flask(__name__)
app.secret_key = b'_5#y2L"F4Q8z\n\xec]/'

#returns a dictionary of all books and branches.
def helper_search_books(form):
    title = None
    author = None
    condition_concat = None

    if request.method == "POST" and form.validate():
        title = form.title.data
        author = form.author.data
        condition_concat = form.condition_concat.data
    books = db.get_books(title=title, author=author, condition_concat=condition_concat)
    branches = db.get_all_branches()
    return {"books":books, "branches":branches}

#executes a query that returns books that has been on loan.
def helper_return_book(form=None):
    book_id = form.book_id.data
    branch_id = form.branch_id.data
    card_no = form.card_no.data
    date_out = form.date_out.data
    date_due = form.date_due.data
    db.return_book(book_id=book_id, branch_id=branch_id, card_no=card_no, date_out=date_out, date_due=date_due)

    return True

#returns a list of forms (“Return book” button with hidden fields) for a list of books.
def helper_generate_return_book_forms(list):
    return_book_forms = []
    for book in list:
        form = Return_Book()
        form.card_no.data = book["CardNo"]
        form.book_id.data = book["BookId"]
        form.status.data = book["Status"]
        return_book_forms.append(form)
    return return_book_forms

#user (borrower) home page. This is th eonly page available for the user
@app.route("/", methods=["GET", "POST"])
def catalogue():
    form = Search_Book()

    #used to toggle "Show all books" link after search form was submitted
    is_post=False 
    if request.method == "POST":
        is_post = True
    catalogue = helper_search_books(form=form)
    return render_template("catalogue.html", admin_catalogue=False, books=catalogue["books"], branches=catalogue["branches"], form=form, is_post=is_post, is_not_admin_page=True)

#admin home page
@app.route("/admin", methods=["GET", "POST"])
def admin_catalogue():
    form = Search_Book()
    is_post=False
    if request.method == "POST":
        is_post = True
    catalogue = helper_search_books(form=form)
    return render_template("catalogue.html", admin_catalogue=True, books=catalogue["books"], branches=catalogue["branches"], form=form, is_post=is_post)

#Individual book page.
@app.route("/admin/book/<int:book_id>", methods=["GET", "POST"])
def admin_book(book_id=None):

    # holds a list of "Lend book" forms where admin can find borrower by name or card number
    branch_forms = [] 

    # generate form for each branch that has a copy of this book
    for branch in db.get_all_branches(book_id):
        form = Borrowers_Lend(prefix=str(branch["BranchId"]))
        form.branch_id.data = branch["BranchId"]
        branch_forms.append(form)

    #identify which form was submitted
    for form in branch_forms:
        if request.method == "POST" and form.validate_on_submit():

            # list of borrowers and their ID's in the same way as in datalist generated by jinja
            borrowers = [borrower['Name']+" | " +str(borrower['CardNo']) for borrower in db.get_borrowers()] 
    
            #try to insert data in the database
            try:
                book_id = int(form.book_id.data)
                branch_id = int(form.branch_id.data)
                book_id = int(form.book_id.data)
                card_no = int(form.borrowers_input.data.split("|",1)[1].strip())
                date_out = date.today()
                date_due = date_out + timedelta(days=28)

                #check if user already borrowed this book earlier and has not returned yet
                user_already_borrowed_book = bool(len(db.get_book_current_borrowers(book_id=book_id, card_no=card_no)))
                if user_already_borrowed_book:
                    form.borrowers_input.errors.append("User has already borrowed this book. Only one book per borrower is allowed.")
                else:
                    #lend book if borrower didn't lend it yet
                    db.lend_book(book_id=book_id, branch_id=branch_id, card_no=card_no, date_due=date_due, date_out=date_out)
                form.borrowers_input.data = ""
            #generate an error if admin has entered not valid card number, name or didn't enter anything in the form at all
            except:
                if bool(form.borrowers_input.data) == False:
                    form.borrowers_input.errors.append("Please enter borrower card number or name.")
                   
                elif "|" not in form.borrowers_input.data:
                    form.borrowers_input.errors.append("Borrower not found.")
                elif "|" in form.borrowers_input.data:
                    if form.borrowers_input.data not in borrowers:
                        form.borrowers_input.errors.append("Borrower not found.")

    #list of “return book” forms (button and hidden fields)
    return_book_forms = helper_generate_return_book_forms(db.get_book_current_borrowers(book_id))

    for form in return_book_forms:
        if request.method == "POST" and form.validate_on_submit():
            #updates value for the book in the Book_Loans table
            helper_return_book(form=form)
    
    # book data
    book = db.get_books(book_id)

    # holds a list of all borrowers available in a database. Used to populate the datalist for the “Lend book” field
    borrowers = db.get_borrowers() 

    # a list of branches that have a copy of this book
    branches = db.get_all_branches(book_id)

    # list of users who lended this book
    current_borrowers = db.get_book_current_borrowers(book_id)
    
    return render_template("book.html", book = book[0], branches=branches, borrowers=borrowers, current_borrowers=current_borrowers, admin_book_page=True, return_book_forms=return_book_forms, branch_forms=branch_forms)

@app.route("/admin/borrower/<int:card_no>", methods=["GET", "POST"])
def admin_borrower(card_no = None):

    # list of all books including already returned as well as currently on loan
    borrower_loans  = db.get_borrower_loans(card_no=card_no)

    # holds a list of “return book” forms (button and hidden fields)
    return_book_forms = helper_generate_return_book_forms(borrower_loans)

    for form in return_book_forms:
        if request.method == "POST" and form.validate_on_submit():
            #updates value for the book in the Book_Loans table
            helper_return_book(form=form)

    # this form reloads a list of loans after "return book" form was submitted
    borrower = db.get_borrower(card_no=card_no)
    borrower_loans  = db.get_borrower_loans(card_no=card_no)
    return render_template("borrower.html", admin_borrower_page=True, borrower=borrower, borrower_loans=borrower_loans, return_book_forms=return_book_forms)

@app.route("/admin/borrowers", methods=["GET", "POST"])
def admin_borrowers():
    search_form = Search_Borrowers()
    query = None

    # used to toggle "Show all books" link after search form was submitted
    is_post = None
    if request.method == "POST" and search_form.validate():

        #holds a value that admin enters in the “search borrower” form
        query = search_form.query.data
        is_post = True

    # list of borrowers as per query
    borrowers = db.get_borrowers(query=query)
    return render_template("borrowers.html", admin_borrowers_page=True, borrowers=borrowers, form=search_form, is_post=is_post)

#shows all overdue books & their borrowers
@app.route("/admin/overdue")
def admin_overdue():
    books = db.get_overdue()
    return render_template("overdue.html", admin_overdue_page=True, books=books)

# 404 page
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404